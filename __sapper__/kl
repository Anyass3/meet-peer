createPeer: ({ state, dispatch }, peerId, name) => {
      const stream: MediaStream = get(state.stream);
      const peer = new window['SimplePeer']({
        initiator: true,
        trickle: true,
        stream,
        config: get(state.iceConfig),
      });

      peer.on('signal', (signal) => {
        const socket: Socket = get(state.socket);
        socket.emit('signaling-peer', {
          peerId,
          signal,
          name: get(state.userName),
        });
      });
      state.peers.update((peers) =>
        peers.add({
          peerId: peerId,
          peer,
          name,
        })
      );
      peer.on('stream', (stream) => {
        dispatch('playVideo', stream, peerId);
      });
      // return peer;
    },
    // old comers waiting for signals
    addPeer: ({ state, dispatch }, incomingSignal, peerId, name) => {
      const stream: MediaStream = get(state.stream);
      const peer = new window['SimplePeer']({
        initiator: false,
        trickle: true,
        stream,
        config: get(state.iceConfig),
      });
      // peer will not signal now except after
      // being signaled by this user
      peer.on('signal', (signal) => {
        const socket: Socket = get(state.socket);
        socket.emit('returning-signal', { peerId, signal, name });
      });
      peer.signal(incomingSignal);
      state.peers.update((peers) =>
        peers.add({
          peerId: peerId,
          peer,
          name,
        })
      );
      peer.on('stream', (stream) => {
        dispatch('playVideo', stream, peerId);
      });

      // return peer;
    },

playVideo({ commit, state }, stream, peerId) {
      if (stream.getVideoTracks()[0].muted) {
        commit(
          'setPeerVideo',
          peerId,
          new MediaStream([get(state.fakeVideoStream), stream.getAudioTracks()[0]]),
          { muted: false }
        );
        // console.log('VidinitVideoeo is muted');
        stream.getVideoTracks()[0].onunmute = () => {
          // console.log('Video has unmuted');
          commit('setPeerVideo', peerId, stream, { muted: false });
        };
        stream.getVideoTracks()[0].onmute = () => {
          // console.log('video MUTED Again', i.peerID);
          commit(
            'setPeerVideo',
            peerId,
            new MediaStream([get(state.fakeVideoStream), stream.getAudioTracks()[0]]),
            { muted: false }
          );
        };
      } else {
        // console.log('Video not muted');
        commit('setPeerVideo', peerId, stream, { muted: false });
      }
    },






      // to get and setup peers already in the meet
      socket.on('joined-in-room', (joinedPeers) => {
        console.log(`${joinedPeers.length} peers are already in meet`);
        dispatch('setEnteredRoom', true);
        joinedPeers.forEach((i) => {
          dispatch('createPeer', i.id, i.name);
          // dispatch('playVideos');
        });
      });

      // to get and setup a newly joined peer
      socket.on('user-joined', (payload) => {
        dispatch('addPeer', payload.signal, payload.peerId, payload.name);
        // dispatch('playVideos');
      });
      socket.on('receiving-candidate', (payload) => {
        const peers: Set<any> = get(state.peers);
        const item = Array.from(peers).find((i) => i['peerId'] === payload.peerId);
        // const item: any = get(g('getPeer', payload.id));
        item.peer.signal(payload.signal);
      });


//server
socket.on('signaling-peer', (payload) => {
    const signaledPeer = io.to(payload.peerId);
    // console.log('signaling-peer')
    if (payload.signal.type === 'offer')
      signaledPeer.emit('user-joined', {
        signal: payload.signal,
        peerId: socket.id,
        name: payload.name,
      });
    else
      signaledPeer.emit('receiving-candidate', {
        peerId: socket.id,
        signal: payload.signal,
      });
  });